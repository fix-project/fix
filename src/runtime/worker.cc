#include <string_view>
#include <utility>

#include "base64.hh"
#include "handle.hh"
#include "operation.hh"
#include "runtime.hh"
#include "runtimestorage.hh"
#include "sha256.hh"
#include "task.hh"

#include "wasm-rt-content.h"

using namespace std;

#ifndef COMPILE
#define COMPILE "COMPILE MUST BE DEFINED"
#endif

optional<Handle> RuntimeWorker::await( Task target, Task current )
{
  return graph_.start_after( target, current );
}

bool RuntimeWorker::await_tree( Task task )
{
  Tree tree = storage_.get_tree( task.handle() );
  return graph_.start_after( tree, task );
}

std::optional<Handle> RuntimeWorker::do_eval( Task task )
{
  auto name = task.handle();
  if ( name.is_lazy() ) {
    return name;
  }
  optional<Handle> result;

  switch ( name.get_content_type() ) {
    case ContentType::Blob:
      return name;

    case ContentType::Tree:
      if ( !await_tree( task ) )
        return {};

      return await( Task::Fill( name ), task );

    case ContentType::Tag: {
      Tree tree = storage_.get_tree( name );

      if ( tree.at( 0 ).get_content_type() == ContentType::Blob ) {
        return name;
      }

      result = await( Task::Eval( tree.at( 0 ) ), task );
      if ( not result )
        return {};

      return await( Task::Fill( name ), task );
    }

    case ContentType::Thunk:
      Handle encode = storage_.get_thunk_encode_name( name );

      result = await( Task::Eval( encode ), task );
      if ( not result )
        return {};

      result = await( Task::Apply( result.value() ), task );
      if ( not result )
        return {};

      if ( name.is_shallow() )
        result = Handle::make_shallow( result.value() );

      return await( Task::Eval( result.value() ), task );
  }

  throw std::runtime_error( "unhandled case in eval" );
}

Handle RuntimeWorker::do_apply( Task task )
{
  auto name = task.handle();
  if ( not( name.is_strict() and name.is_tree() ) ) {
    if ( name.is_thunk() ) {
      throw std::runtime_error( "Attempted to apply a Thunk, not an Encode." );
    }
    throw std::runtime_error( "Attempted to apply something besides a strict tree." );
  }
  Handle function_tag = storage_.get_tree( name ).at( 1 );
  if ( function_tag.is_blob() ) {
    std::cerr << storage_.get_blob( function_tag ) << "\n";
    throw std::runtime_error( "Attempted to apply a Thunk with an invalid procedure." );
  }
  while ( !storage_.get_tree( function_tag ).at( 1 ).is_blob() ) {
    if ( not storage_.get_tree( function_tag ).at( 1 ).is_tag() ) {
      throw std::runtime_error( "Procedure is not a tag." );
    }
    function_tag = storage_.get_tree( function_tag ).at( 1 );
  }

  auto tag = storage_.get_tree( function_tag );
  const static Handle COMPILE_ELF = storage_.get_ref( "compile-elf" ).value();
  if ( tag.at( 1 ) != COMPILE_ELF ) {
    throw std::runtime_error( "Procedure is not generated by trusted compilation toolchain: generated by "
                              + storage_.get_display_name( tag.at( 1 ) ) );
  }
  if ( tag.at( 2 ) != Handle( "Runnable" ) ) {
    cerr << "Attempted to run non-Runnable procedure:" << endl;
    cerr << "- object: " << tag.at( 0 ) << endl;
    cerr << "- author: " << tag.at( 1 ) << endl;
    cerr << "- type: " << tag.at( 2 ).literal_blob() << endl;
    Handle handle = tag.at( 0 );
    string_view data = storage_.get_blob( handle );
    bool is_printable
      = std::count_if( data.begin(), data.end(), []( unsigned char c ) { return std::isprint( c ); } );
    if ( is_printable == data.size() ) {
      cerr << "--- ERROR ---" << endl;
      cerr << data << endl;
      cerr << "-------------" << endl;
    } else {
      cerr << "Object is not printable." << endl;
    }
    throw std::runtime_error( "Procedure is not runnable" );
  }

  Handle function_name = tag.at( 0 );
  Handle canonical_name = storage_.canonicalize( function_name );
  if ( not storage_.name_to_program_.contains( canonical_name ) ) {
    /* Link program */
    Program program = link_program( storage_.get_blob( function_name ) );
    storage_.name_to_program_.put( canonical_name, std::move( program ) );
  }

  auto& program = storage_.name_to_program_.getMutable( canonical_name );
  runtime_.set_current_procedure( canonical_name );
  __m256i output = program.execute( name );

  return output;
}

Handle RuntimeWorker::do_fill( Handle name )
{
  switch ( name.get_content_type() ) {
    case ContentType::Tree: {
      auto orig_tree = storage_.get_tree( name );
      Handle new_name = storage_.add_tree( Tree( orig_tree.size() ) );
      span_view<Handle> tree = storage_.get_tree( new_name );

      for ( size_t i = 0; i < tree.size(); ++i ) {
        auto entry = orig_tree[i];
        tree.mutable_data()[i] = entry;

        if ( entry.is_strict() and !entry.is_blob() ) {
          // the entry must have been started (the first .value) and finished (the second .value)
          tree.mutable_data()[i] = graph_.get( Task::Eval( entry ) ).value();
        }
      }

      return new_name;
    }

    case ContentType::Tag: {
      auto orig_tag = storage_.get_tree( name );
      Handle new_name = storage_.add_tag( Tree( orig_tag.size() ) );
      span_view<Handle> tag = storage_.get_tree( new_name );

      auto first_entry = orig_tag[0];
      tag.mutable_data()[0] = graph_.get( Task::Eval( first_entry ) ).value();
      tag.mutable_data()[1] = orig_tag[1];
      tag.mutable_data()[2] = orig_tag[2];

      return new_name;
    }

    default:
      throw std::runtime_error( "Invalid content type for fill." );
  }
}

optional<Handle> RuntimeWorker::progress( Task task )
{
  switch ( task.operation() ) {
    case Operation::Apply:
      return do_apply( task );
    case Operation::Eval:
      return do_eval( task );
    case Operation::Fill:
      return do_fill( task.handle() );
  }
  throw std::runtime_error( "invalid operation for progress" );
}

void RuntimeWorker::work()
{
  current_thread_id_ = thread_id_;

  try {
    while ( true ) {
      auto task = runq_.pop_or_wait();
      auto result = progress( task );
      if ( result )
        graph_.finish( std::move( task ), *result );
    }
  } catch ( ChannelClosed& ) {
    return;
  }
}
