#!/usr/bin/perl -w

use strict;

if ((scalar @ARGV) != 3) {
  die qq{Usage: $0 stateless-tester fib.wasm addblob.wasm};
}

my ($executable, $fib_wasm, $add_wasm) = @ARGV;

sub fib($) {
  if ( $_[0] eq 0 ) {
    return 1;
  }

  if ( $_[0] eq 1 ) {
    return 1;
  }

  my $a = 1;
  my $b = 1;
  my $c = 0;
  for ( my $i = 2; $i <= $_[0]; $i++ ) {
    $c = $a + $b;
    $a = $b;
    $b = $c;
  }
  return $c;
}

sub check_fib($) {
  my ($x, $y) = @_;
  my $expected_answer = unpack q{l}, (pack q{l}, fib($x));

  my $result = `$executable tree:4 string:\"0\" thunk: tree:3 string:\"0\" ref:compile-encode file:$fib_wasm uint32:$x thunk: tree:3 string:\"0\" ref:compile-encode file:$add_wasm 2>&1`;

  if ($?) {
    print STDERR qq{Got result:\n$result\n};
    die qq{Failure in running fib($x)};
  }

  my (undef, $substring) = split( 'Result:\n', $result );
  my ($blob) = $substring =~ m{^Blob \(4 bytes\): (.*)$};
  my ($answer) = $blob =~ m{uint32:(\d*)\)$};

  if ( ! ( $answer eq $expected_answer ) ) {
    print STDERR qq{Got result:\n$result\n};
    die qq{Wrong answer to fib($x) ($answer) ($expected_answer)};
  }
}

check_fib(0);
check_fib(1);
check_fib(4);
