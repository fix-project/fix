""" Generates a wat file that defines rw/ro tables and memories and a c
 file that imports those tables/memories and corresponding helper functions."""

NUM_RO_MEM = 4
NUM_RO_TABLE = 8
NUM_RW_MEM = 3
NUM_RW_TABLE = 3

PATH = 'applications/util/'
MODULE = 'fixpoint_storage'
FIXPOINT_MODULE = 'fixpoint'
HEADER = ' This file was automatically generated by generate.py'
WAT_DESCRIPTION = ' Defines and exports wasm tables and memories and helper ' \
                    'functions for those tables and memories.'
C_DESCRIPTION = ' Imports wasm tables, memories, and helper functions from '\
                    f'"{MODULE}" and imports fixpoint api functions.'


# wat commands
WAT_DECLARE_MEM = '(memory ${name} (export "{name}") {size})\n'
WAT_DECLARE_TABLE = '(table ${name} (export "{name}") {size} externref)\n'

WAT_TABLE_SET =   '(func (export "set_{name}") (param $index i32) (param $val externref)\n \
    (table.set ${name} (local.get $index) (local.get $val)))\n'

WAT_TABLE_GET =  '(func (export "get_{name}") (param $index i32) (result externref)\n\
    (table.get ${name} (local.get $index)))\n'

WAT_TABLE_GROW =   '(func (export "grow_{name}") (param $size i32) (param $init_val externref ) \
    (result i32)\n    (local.get $init_val)\n\
    (local.get $size)\n\
    (table.grow ${name}))\n'

WAT_SIZE = '(func (export "size_{name}") (result i32)\n\
    ({table_or_memory}.size ${name}))\n'

WAT_MEM_GET = '(func (export "get_{int_type}_{name}") (param $index i32) (result i32)\n\
    (i32.load{suffix} ${name} (local.get $index)))\n'

WAT_MEM_SET = '(func (export "set_{int_type}_{name}") (param $index i32) (param $val i32)\n\
    (i32.store{suffix} ${name} (local.get $index) (local.get $val)))\n'

WAT_MEM_GROW = '(func (export "grow_{name}") (param $size i32) (result i32)\n\
    (local.get $size)\n\
    (memory.grow ${name}))\n'

WAT_COPY = '(func (export "copy_ro_{mem_or_table}_{ro_index}_to_rw_{rw_index}")\n\
    (param $rw_offset i32) (param $ro_offset i32) (param $length i32)\n\
    ({memory_or_table}.copy $ro_{mem_or_table}_{ro_index} $rw_{mem_or_table}_{rw_index} (local.get $rw_offset) (local.get $ro_offset) (local.get $length)))\n'

# c commands
C_INCLUDES = '#include <stdint.h>\n'
C_EXTERNREF = 'typedef char __attribute__( ( address_space( 10 ) ) ) * externref;\n'
C_TABLE_SET = 'void set_{name}( int32_t index, externref pointer )\n\
  __attribute__( ( import_module( "{module}" ), import_name( "set_{name}" ) ) );\n'
C_TABLE_GROW = 'int32_t grow_{name}( int32_t size, externref pointer )\n\
  __attribute__( ( import_module( "{module}" ), import_name( "grow_{name}" ) ) );\n'

C_TABLE_GET = 'externref get_{name}( int32_t index )\n\
  __attribute__( ( import_module( "{module}" ), import_name( "get_{name}" ) ) );\n'

C_TABLE_SIZE = 'int32_t size_{name}(void) __attribute__( ( import_module( "{module}" ), '\
             'import_name( "size_{name}" ) ) );\n'

C_MEM_SIZE = 'int32_t {byte_or_page}_size_{name}(void) __attribute__( ( import_module( "{module}" ), '\
             'import_name( "size_{name}" ) ) );\n'

C_CREATE = 'externref create_{tree_or_blob}_{name}( int32_t size )\n\
  __attribute__( ( import_module( "{module}" ), import_name( "create_{tree_or_blob}_{name}" ) ) );\n'

C_GET_ATTACHED = 'externref get_attached_{tree_or_blob}_{name}(void)\n\
  __attribute__( ( import_module( "{module}" ), import_name( "get_attached_{tree_or_blob}_{name}" ) ) );\n'
C_ATTACH = 'void attach_{tree_or_blob}_{name}(externref)\n\
  __attribute__( ( import_module( "{module}" ), import_name( "attach_{tree_or_blob}_{name}" ) ) );\n'

C_MEM_SET = 'void set_{int_type}_{name}( int32_t index, int32_t val )\n\
  __attribute__( ( import_module( "{module}" ), import_name( "set_{int_type}_{name}" ) ) );\n'

C_MEM_GROW = 'int32_t grow_{name}_pages( int32_t size )\n\
  __attribute__( ( import_module( "{module}" ), import_name( "grow_{name}" ) ) );\n'

C_MEM_GET = 'int32_t get_{int_type}_{name}( int32_t ) '\
     '__attribute__( ( import_module( "{module}" ), import_name( "get_{int_type}_{name}" ) ) );\n'
C_COPY = 'void copy_ro_{mem_or_table}_{ro_index}_to_rw_{rw_index}(int32_t rw_offset, int32_t ro_offset, int32_t len )\n\
    __attribute__( ( import_module( "{module}" ), import_name( "copy_ro_{mem_or_table}_{ro_index}_to_rw_{rw_index}" ) ) );\n'

# c function lists
C_LIST_TABLE_GET = 'static externref (*const get_{ro_or_rw}_table_functions[]) (int32_t) = {list};\n'
C_LIST_TABLE_SET = 'static void (*const set_rw_table_functions[]) (int32_t, externref) = {list};\n'
C_LIST_TABLE_GROW = 'static int32_t (*const grow_rw_table_functions[]) (int32_t, externref) = {list};\n'
C_LIST_MEM_GET = 'static int32_t (*const get_{int_type}_{ro_or_rw}_mem_functions[]) (int32_t) = {list};\n'
C_LIST_MEM_SET = 'static void (*const set_{int_type}_rw_mem_functions[]) (int32_t, int32_t) = {list};\n'
C_LIST_MEM_GROW = 'static int32_t (*const grow_rw_mem_functions[]) (int32_t) = {list};\n'
C_LIST_TABLE_SIZE = 'static int32_t (*const size_{ro_or_rw}_table_functions[])(void) = {list};\n'
C_LIST_MEM_SIZE = 'static int32_t (*const {byte_or_page}_size_{ro_or_rw}_mem_functions[])(void) = {list};\n'
C_LIST_CREATE = 'static externref (*const create_{tree_or_blob}_functions[]) (int32_t) = {list};\n'
C_LIST_GET_ATTACHED = 'static externref (*const get_attached_{tree_or_blob}_functions[]) (void) = {list};\n'
C_LIST_ATTACH = 'static void (*const attach_{tree_or_blob}_functions[]) (externref) = {list};\n'
C_LIST_COPY = 'static void (*const copy_ro_{mem_or_table}_to_rw_functions[{num_ro}][{num_rw}]) (int32_t, int32_t, int32_t) = {list};\n'
def write_wat():
    """Writes wat tables, memories, and helper functions."""
    f = open(f'{PATH}{MODULE}.wat', 'w')
    f.write(f';;{HEADER}\n')
    f.write(f';;{WAT_DESCRIPTION}\n\n')
    # declare memories and tables
    for i in range(NUM_RO_MEM):
        name = f'ro_mem_{i}'
        f.write(WAT_DECLARE_MEM.format(name = name, size = 0))
    f.write('\n')
    for i in range(NUM_RW_MEM):
        name = f'rw_mem_{i}'
        f.write(WAT_DECLARE_MEM.format(name = name, size = 0))
    f.write('\n')
    for i in range(NUM_RO_TABLE):
        name = f'ro_table_{i}'
        f.write(WAT_DECLARE_TABLE.format(name = name, size = 0))
    f.write('\n')
    for i in range(NUM_RW_TABLE):
        name = f'rw_table_{i}'
        f.write(WAT_DECLARE_TABLE.format(name = name, size = 0))
    f.write('\n')
    # ro table operations
    for i in range(NUM_RO_TABLE):
        name = f'ro_table_{i}'
        f.write(f';; {name} operations \n')
        f.write(WAT_TABLE_GET.format(name = name))
        f.write(WAT_SIZE.format(name=name, table_or_memory='table'))
        f.write('\n')
    # rw table operations
    for i in range(NUM_RW_TABLE):
        name = f'rw_table_{i}'
        f.write(f';; {name} operations \n')
        f.write(WAT_TABLE_SET.format(name = name))
        f.write(WAT_TABLE_GET.format(name = name))
        f.write(WAT_TABLE_GROW.format(name = name))
        f.write(WAT_SIZE.format(name=name, table_or_memory='table'))
        f.write('\n')
    # ro mem operations
    for i in range(NUM_RO_MEM):
        name = f'ro_mem_{i}'
        f.write(f';; {name} operations \n')
        f.write(WAT_MEM_GET.format(name = name, suffix='', int_type = 'i32'))
        f.write(WAT_MEM_GET.format(name = name, suffix='8_u', int_type = 'i8'))
        f.write('\n')
    # rw mem operations
    for i in range(NUM_RW_MEM):
        name = f'rw_mem_{i}'
        f.write(f';; {name} operations \n')
        f.write(WAT_MEM_SET.format(name = name, suffix = '', int_type = 'i32'))
        f.write(WAT_MEM_SET.format(name = name, suffix = '8', int_type = 'i8'))
        f.write(WAT_MEM_GET.format(name = name, suffix='', int_type = 'i32'))
        f.write(WAT_MEM_GET.format(name = name, suffix='8_u', int_type = 'i8'))
        f.write(WAT_MEM_GROW.format(name = name))
        f.write(WAT_SIZE.format(name=name, table_or_memory='memory'))
        f.write('\n')
    # table copy operations
    f.write(';; table copy operations \n')
    for ro_index in range(NUM_RO_TABLE):
        for rw_index in range(NUM_RW_TABLE):
            f.write(WAT_COPY.format(mem_or_table ='table', ro_index = ro_index, rw_index = rw_index, module=MODULE, memory_or_table='table'))
    f.write('\n')
    # mem copy operations
    f.write(';; mem copy operations \n')
    for ro_index in range(NUM_RO_MEM):
        for rw_index in range(NUM_RW_MEM):
            f.write(WAT_COPY.format(mem_or_table ='mem', ro_index = ro_index, rw_index = rw_index, module=MODULE, memory_or_table='memory'))
    f.write('\n')
    f.close()

def write_c():
    """Writes c file that imports wat tables, memories, and helper functions."""
    f = open(f'{PATH}{MODULE}.h', 'w')
    f.write(f'//{HEADER}\n')
    f.write(f'//{C_DESCRIPTION}\n\n')
    f.write(C_INCLUDES)
    f.write(C_EXTERNREF)
    f.write('\n')
    
    f.write(f'const static int NUM_RO_MEM = {NUM_RO_MEM};\n')
    f.write(f'const static int NUM_RO_TABLE = {NUM_RO_TABLE};\n')
    f.write(f'const static int NUM_RW_MEM = {NUM_RW_MEM};\n')
    f.write(f'const static int NUM_RW_TABLE = {NUM_RW_TABLE};\n')
    f.write('\n')

    # ro table imports
    for i in range(NUM_RO_TABLE):
        name = f'ro_table_{i}'
        f.write(f'// {name} imports \n')
        f.write(C_TABLE_GET.format(name = name, module=MODULE))
        f.write(C_TABLE_SIZE.format(name=name, module=MODULE))
        f.write(C_ATTACH.format(name = name, tree_or_blob='tree', module = FIXPOINT_MODULE))
        f.write(C_GET_ATTACHED.format(name=name, tree_or_blob='tree', module = FIXPOINT_MODULE))
        f.write('\n')
    # rw table imports
    for i in range(NUM_RW_TABLE):
        name = f'rw_table_{i}'
        f.write(f'// {name} imports \n')
        f.write(C_TABLE_SET.format(name = name, module=MODULE))
        f.write(C_TABLE_GET.format(name = name, module=MODULE))
        f.write(C_TABLE_GROW.format(name = name, module=MODULE))
        f.write(C_TABLE_SIZE.format(name=name, module=MODULE))
        f.write(C_CREATE.format(name = name, tree_or_blob='tree', module = FIXPOINT_MODULE))
        f.write('\n')
    # ro mem imports
    for i in range(NUM_RO_MEM):
        name = f'ro_mem_{i}'
        f.write(f'// {name} imports \n')
        f.write(C_MEM_GET.format(name = name, module=MODULE, int_type = 'i32'))
        f.write(C_MEM_GET.format(name = name, module=MODULE, int_type = 'i8'))
        f.write(C_MEM_SIZE.format(byte_or_page = 'byte', name=name, module=FIXPOINT_MODULE))
        f.write(C_GET_ATTACHED.format(name = name, tree_or_blob='blob', module = FIXPOINT_MODULE))
        f.write(C_ATTACH.format(name = name, tree_or_blob='blob', module = FIXPOINT_MODULE))
        f.write('\n')
    # rw mem imports
    for i in range(NUM_RW_MEM):
        name = f'rw_mem_{i}'
        f.write(f'// {name} imports \n')
        f.write(C_MEM_SET.format(name = name, module=MODULE, int_type = 'i32'))
        f.write(C_MEM_SET.format(name = name, module=MODULE, int_type = 'i8'))
        f.write(C_MEM_GET.format(name = name, module=MODULE, int_type = 'i32'))
        f.write(C_MEM_GET.format(name = name, module=MODULE, int_type = 'i8'))
        f.write(C_MEM_GROW.format(name = name, module=MODULE))
        f.write(C_MEM_SIZE.format(byte_or_page = 'page', name=name, module=MODULE))
        f.write(C_CREATE.format(name = name, tree_or_blob='blob', module = FIXPOINT_MODULE))
        f.write('\n')
    # table copy imports
    f.write('// table copy imports \n')
    for ro_index in range(NUM_RO_TABLE):
        for rw_index in range(NUM_RW_TABLE):
            f.write(C_COPY.format(mem_or_table ='table', ro_index = ro_index, rw_index = rw_index, module=MODULE))
    f.write('\n')
    # mem copy imports
    f.write('// mem copy imports \n')
    for ro_index in range(NUM_RO_MEM):
        for rw_index in range(NUM_RW_MEM):
            f.write(C_COPY.format(mem_or_table ='mem', ro_index = ro_index, rw_index = rw_index, module=MODULE))
    f.write('\n')
            
    # ro table function arrays
    f.write('// ro table function arrays \n')
    f_list = ','.join([f'get_ro_table_{i}' for i in range(NUM_RO_TABLE) ])
    f.write(C_LIST_TABLE_GET.format(ro_or_rw = 'ro', list='{'+f_list+'}'))
    f_list = ','.join([f'size_ro_table_{i}' for i in range(NUM_RO_TABLE) ])
    f.write(C_LIST_TABLE_SIZE.format(ro_or_rw = 'ro',  list='{'+f_list+'}'))
    f_list = ','.join([f'get_attached_tree_ro_table_{i}' for i in range(NUM_RO_TABLE) ])
    f.write(C_LIST_GET_ATTACHED.format(tree_or_blob = 'tree', list='{'+f_list+'}'))
    f_list = ','.join([f'attach_tree_ro_table_{i}' for i in range(NUM_RO_TABLE) ])
    f.write(C_LIST_ATTACH.format(tree_or_blob = 'tree', list='{'+f_list+'}'))
    f.write('\n')

    # rw table function arrays
    f.write('// rw table function arrays \n')
    f_list = ','.join([f'get_rw_table_{i}' for i in range(NUM_RW_TABLE) ])
    f.write(C_LIST_TABLE_GET.format(ro_or_rw = 'rw', list='{'+f_list+'}'))
    f_list = ','.join([f'size_rw_table_{i}' for i in range(NUM_RW_TABLE) ])
    f.write(C_LIST_TABLE_SIZE.format(ro_or_rw = 'rw', list='{'+f_list+'}'))
    f_list = ','.join([f'grow_rw_table_{i}' for i in range(NUM_RW_TABLE) ])
    f.write(C_LIST_TABLE_GROW.format( list='{'+f_list+'}'))
    f_list = ','.join([f'set_rw_table_{i}' for i in range(NUM_RW_TABLE) ])
    f.write(C_LIST_TABLE_SET.format( list='{'+f_list+'}'))
    f_list = ','.join([f'create_tree_rw_table_{i}' for i in range(NUM_RW_TABLE) ])
    f.write(C_LIST_CREATE.format( tree_or_blob = 'tree', list='{'+f_list+'}'))
    f.write('\n')

    # ro mem function arrays
    f.write('// ro mem function arrays \n')
    f_list = ','.join([f'get_i32_ro_mem_{i}' for i in range(NUM_RO_MEM) ])
    f.write(C_LIST_MEM_GET.format(ro_or_rw = 'ro', list='{'+f_list+'}', int_type = 'i32'))
    f_list = ','.join([f'get_i8_ro_mem_{i}' for i in range(NUM_RO_MEM) ])
    f.write(C_LIST_MEM_GET.format(ro_or_rw = 'ro', list='{'+f_list+'}', int_type = 'i8'))
    f_list = ','.join([f'byte_size_ro_mem_{i}' for i in range(NUM_RO_MEM) ])
    f.write(C_LIST_MEM_SIZE.format(byte_or_page = 'byte', ro_or_rw = 'ro', list='{'+f_list+'}'))
    f_list = ','.join([f'get_attached_blob_ro_mem_{i}' for i in range(NUM_RO_MEM) ])
    f.write(C_LIST_GET_ATTACHED.format(tree_or_blob = 'blob', list='{'+f_list+'}'))
    f_list = ','.join([f'attach_blob_ro_mem_{i}' for i in range(NUM_RO_MEM) ])
    f.write(C_LIST_ATTACH.format(tree_or_blob = 'blob', list='{'+f_list+'}'))
    f.write('\n')

    # rw mem function arrays
    f.write('// rw mem function arrays \n')
    f_list = ','.join([f'get_i32_rw_mem_{i}' for i in range(NUM_RW_MEM) ])
    f.write(C_LIST_MEM_GET.format(ro_or_rw = 'rw', list='{'+f_list+'}', int_type = 'i32'))
    f_list = ','.join([f'get_i8_rw_mem_{i}' for i in range(NUM_RW_MEM) ])
    f.write(C_LIST_MEM_GET.format(ro_or_rw = 'rw', list='{'+f_list+'}', int_type = 'i8'))
    f_list = ','.join([f'page_size_rw_mem_{i}' for i in range(NUM_RW_MEM) ])
    f.write(C_LIST_MEM_SIZE.format(ro_or_rw = 'rw',byte_or_page = 'page', list='{'+f_list+'}'))
    f_list = ','.join([f'grow_rw_mem_{i}_pages' for i in range(NUM_RW_MEM) ])
    f.write(C_LIST_MEM_GROW.format( list='{'+f_list+'}'))
    f_list = ','.join([f'set_i32_rw_mem_{i}' for i in range(NUM_RW_MEM) ])
    f.write(C_LIST_MEM_SET.format( list='{'+f_list+'}', int_type = 'i32'))
    f_list = ','.join([f'set_i8_rw_mem_{i}' for i in range(NUM_RW_MEM) ])
    f.write(C_LIST_MEM_SET.format( list='{'+f_list+'}', int_type = 'i8'))
    f_list = ','.join([f'create_blob_rw_mem_{i}' for i in range(NUM_RW_MEM) ])
    f.write(C_LIST_CREATE.format( tree_or_blob = 'blob', list='{'+f_list+'}'))
    f.write('\n')
    
    # mem copy imports
    f.write('// copy function arrays \n')
    mem_copy_functions = []
    for ro_index in range(NUM_RO_MEM):
        ro_functions = []
        for rw_index in range(NUM_RW_MEM):
           ro_functions.append(f'copy_ro_mem_{ro_index}_to_rw_{rw_index}')
        mem_copy_functions.append('{' + ','.join(ro_functions) + '}')
    f.write(C_LIST_COPY.format(list = '{' + ','.join(mem_copy_functions) + '}', mem_or_table='mem', num_ro = NUM_RO_MEM, num_rw = NUM_RW_MEM))

    table_copy_functions = []
    for ro_index in range(NUM_RO_TABLE):
        ro_functions = []
        for rw_index in range(NUM_RW_TABLE):
           ro_functions.append(f'copy_ro_table_{ro_index}_to_rw_{rw_index}')
        table_copy_functions.append('{' + ','.join(ro_functions) + '}')
    f.write(C_LIST_COPY.format(list = '{' + ','.join(table_copy_functions) + '}', mem_or_table='table', num_ro =NUM_RO_TABLE , num_rw = NUM_RW_TABLE))
    f.write('\n')
    f.close()



if __name__ == '__main__':
    write_wat()
    write_c()
